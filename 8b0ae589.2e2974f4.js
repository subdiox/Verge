(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{155:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(9),o=(n(0),n(171)),i={id:"using-with-collection-view",title:"Using with Collection View in UIKit",sidebar_label:"With Collection View in UIKit"},l={id:"VergeStore/use-cases/using-with-collection-view",isDocsHomePage:!1,title:"Using with Collection View in UIKit",description:"This article is under work in progress.",source:"@site/docs/VergeStore/use-cases/using-with-collection-view.md",permalink:"/Verge/docs/VergeStore/use-cases/using-with-collection-view",editUrl:"https://github.com/VergeGroup/Verge/docs/docs/VergeStore/use-cases/using-with-collection-view.md",sidebar_label:"With Collection View in UIKit",sidebar:"docs",previous:{title:"Optimization Tips",permalink:"/Verge/docs/VergeStore/optimization-tips"},next:{title:"Migrate from VergeClassic",permalink:"/Verge/docs/VergeStore/migrate-from-classic"}},c=[{value:"Using multiple stores to connect with a particular UI",id:"using-multiple-stores-to-connect-with-a-particular-ui",children:[]}],s={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This article is under work in progress."))),Object(o.b)("p",null,"Differs with SwiftUI, the developers have to update the UI with updates partially according to state updates."),Object(o.b)("p",null,"In a screen that does not have dynamic item contents, it won't be so much hard."),Object(o.b)("p",null,"However, we should consider the strategy of how we update the cells when we use the dynamic list such as UICollectionView or UITableView."),Object(o.b)("p",null,"This article shows you how we get to do this as a one of the strategies."),Object(o.b)("h2",{id:"using-multiple-stores-to-connect-with-a-particular-ui"},"Using multiple stores to connect with a particular UI"),Object(o.b)("p",null,"We have only one store that has the source of truth. This won't change.",Object(o.b)("br",{parentName:"p"}),"\n","Additionally, we could create another store that states will be derived from the source of truth."),Object(o.b)("p",null,"In the below figure, Store, ViewModel, and CellModel are Store."),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://user-images.githubusercontent.com/1888355/88272709-18f57180-cd14-11ea-8828-bf189f8cfbf2.png",alt:null}))),Object(o.b)("p",null,"Let's take a look simple example with this one entity."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"struct Post {\n  var id: String\n  var body: String\n  var createdAt: Date\n  var author: String\n}\n")),Object(o.b)("p",null,"We dispaly a cell that displays ",Object(o.b)("inlineCode",{parentName:"p"},"Post")," entity in UICollectionView."),Object(o.b)("p",null,"To be done, we will have following types."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A Store that retains the root state to sync displaying data in all places"),Object(o.b)("li",{parentName:"ul"},"A view controller that hosts an UICollectionView."),Object(o.b)("li",{parentName:"ul"},"A cell that displays data of ",Object(o.b)("inlineCode",{parentName:"li"},"Post"),"."),Object(o.b)("li",{parentName:"ul"},"A ViewModel that provides the state to ViewController about the set of ",Object(o.b)("inlineCode",{parentName:"li"},"Post"),"."),Object(o.b)("li",{parentName:"ul"},"A CellModel that provides the state to Cell about ",Object(o.b)("inlineCode",{parentName:"li"},"Post"),".")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"struct RootState: Equatable {\n  var posts: [String : Post] = [:]\n}\n\nfinal class RootStore: Store<RootState, Never> {\n\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class PostListViewController: UIViewController {\n\n  // Creates cells and displays by PostListViewModel.State.displayItems\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class PostListCell: UICollectionViewCell {\n\n  private let titleLabel: UILabel = ...\n  private let bodyLabel: UILabel = ...\n\n  private var cancellable: VergeAnyCancellable?\n\n  func bind(cellModel: PostCellModel) {\n\n    cancellable?.cancel()\n\n    cancellable = cellModel.sinkState(queue: .main) { [weak self] state in\n      guard let self = self else { return }\n\n      state.ifChanged(\\.title) { value in\n        self.titleLabel.text = value\n      }\n\n      state.ifChanged(\\.body) { value in\n        self.bodyLabel.text = value\n      }\n    }\n\n  }\n\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class PostListViewModel: StoreWrapperType {\n\n  struct State: Equatable {\n    @Edge var displayItems: [PostCellModel] = []\n\n    var cachedCellModels: [String : PostCellModel] = [:]\n  }\n\n  init(rootStore: YourRootStore) {\n    ...\n\n    fetch { items in\n\n    }\n  }\n\n  private func fetch(completion: ([Post]) -> Void) {\n\n  }\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),'final class PostCellModel: Equatable, StoreWrapperType {\n\n  static func == (lhs: PostCellModel, rhs: PostCellModel) -> Bool {\n    // The object that contains independent states should be compared by pointer personality.\n    // This behavior is similar with comparing instances of UIView.\n    return lhs === rhs\n  }\n\n  struct State: Equatable {\n    var title: String {\n      "\\(source.author) \\(source.createdAt._psuedo_toString())"\n    }\n    var body: String {\n      source.body\n    }\n\n    fileprivate var source: Post\n  }\n\n  let store: DefaultStore\n\n  init(source: Post) {\n\n    self.store = .init(initialState: .init(source: source))\n\n  }\n\n  func update(source: Post) {\n    commit {\n      $0.source = source\n    }\n  }\n}\n')))}u.isMDXComponent=!0},171:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,m=p["".concat(i,".").concat(d)]||p[d]||b[d]||o;return n?r.a.createElement(m,l(l({ref:t},s),{},{components:n})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);