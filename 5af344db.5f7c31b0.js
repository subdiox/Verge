(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{150:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(9),i=(a(0),a(171)),o={id:"utilities",title:"Utilities",sidebar_label:"Utilities"},l={id:"VergeStore/utilities",isDocsHomePage:!1,title:"Utilities",description:"Edge",source:"@site/docs/VergeStore/utilities.md",permalink:"/Verge/docs/VergeStore/utilities",editUrl:"https://github.com/VergeGroup/Verge/docs/docs/VergeStore/utilities.md",sidebar_label:"Utilities",sidebar:"docs",previous:{title:"Logging",permalink:"/Verge/docs/VergeStore/logging"},next:{title:"Optimization Tips",permalink:"/Verge/docs/VergeStore/optimization-tips"}},c=[{value:"<code>Edge&lt;State&gt;</code>",id:"edgestate",children:[{value:"Edge helps compare if state was updated without Equatable",id:"edge-helps-compare-if-state-was-updated-without-equatable",children:[]},{value:"Actually, we need to get to flag that means different, it no need to be equal",id:"actually-we-need-to-get-to-flag-that-means-different-it-no-need-to-be-equal",children:[]},{value:"Edge does embed state with versioning",id:"edge-does-embed-state-with-versioning",children:[]},{value:"Edge can validate the value and modify to be correctly",id:"edge-can-validate-the-value-and-modify-to-be-correctly",children:[]}]},{value:"assign - assignee",id:"assign---assignee",children:[]}],s={rightToc:c};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"edgestate"},Object(i.b)("inlineCode",{parentName:"h2"},"Edge<State>")),Object(i.b)("h3",{id:"edge-helps-compare-if-state-was-updated-without-equatable"},"Edge helps compare if state was updated without Equatable"),Object(i.b)("p",null,"\u200cIn a single state tree, comparing for reducing the number of updates would be most important for keep performance. However, implementing Equatable is not easy basically. Instead, adding a like flag that indicates updated itself, it would be easy"),Object(i.b)("h3",{id:"actually-we-need-to-get-to-flag-that-means-different-it-no-need-to-be-equal"},"Actually, we need to get to flag that means different, it no need to be equal"),Object(i.b)("p",null,"Actually, we need to get to flag that means ",Object(i.b)("strong",{parentName:"p"},"different"),", it no need to be ",Object(i.b)("strong",{parentName:"p"},"equal"),"."),Object(i.b)("h3",{id:"edge-does-embed-state-with-versioning"},"Edge does embed state with versioning"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Edge")," manages the version of itself, the version will increment each modification. however, it can't get how exactly modified from the modification. and Edge returns equality by comparing their version.\nThat is the reason why Edge may return boolean that false positive.\nIf Edge returns equality false, it may be actually equals."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-swift"}),"struct YourState {\n  var name: String = ...\n}\n\nstruct AppState: Equatable {\n\n  @Edge var yourState YourState = .init()\n}\n")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Since ",Object(i.b)("inlineCode",{parentName:"p"},"Edge")," enables the state to be ",Object(i.b)("inlineCode",{parentName:"p"},"Equatable"),", a root state can be Equatable with synthesizing.",Object(i.b)("br",{parentName:"p"}),"\n","If you're struggling with supporting Equatable, try to use ",Object(i.b)("inlineCode",{parentName:"p"},"Edge")," with that."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"appState.yourState.name\n\n// get unique value that indicates updated to compare with previous value.\n// this value would be updated on every mutation of this tree.\nappState.$yourState.version\n")),Object(i.b)("h3",{id:"edge-can-validate-the-value-and-modify-to-be-correctly"},"Edge can validate the value and modify to be correctly"),Object(i.b)("p",null,"Edge supports a concept of middleware that catch a new value and modifiable.",Object(i.b)("br",{parentName:"p"}),"\n","Please check ",Object(i.b)("inlineCode",{parentName:"p"},"Edge.Middleware")," to see more detail."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-swift"}),"let middleware = Edge<Value>.Middleware.init(onSet: { value in /* do something */ })\n")),Object(i.b)("p",null,"To set it up, we can declare as followings:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-swift"}),"@Edge(middleware: .assert { $0 >= 0 }) var count = 0\n")),Object(i.b)("p",null,"It can be combined from multiple middleware."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-swift"}),"@Edge(middleware: .init([\n  .assert { $0 >= 0 },\n  .init { value in /* performs something */ },\n]))\nvar count = 0\n")),Object(i.b)("h2",{id:"assign---assignee"},"assign - assignee"),Object(i.b)("p",null,"In specific cases, it needs to projects value from others into the Store."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Having multiple stores and needs to be integrated with each other."),Object(i.b)("li",{parentName:"ul"},"Having other reactive streams and needs to be stored the value in the Store")),Object(i.b)("p",null,"In these cases, ",Object(i.b)("inlineCode",{parentName:"p"},"assign")," and ",Object(i.b)("inlineCode",{parentName:"p"},"assignee")," operators help."),Object(i.b)("p",null,"Assigns the value from other Store's state to Store's state."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-swift"}),"let store1 = Store()\nlet store2 = Store()\n\nstore1\n  .derived(.map(\\.count))\n  .assign(to: store2.assignee(\\.count))\n")),Object(i.b)("p",null,"Assigns the value from the Publisher to Store's state."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-swift"}),"let publisher: Combine.Publisher<Int>\nlet store2 = Store()\n\npublisher\n  .assign(to: store2.assignee(\\.count))\n")))}d.isMDXComponent=!0},171:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),d=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=d(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=d(a),p=n,m=b["".concat(o,".").concat(p)]||b[p]||u[p]||i;return a?r.a.createElement(m,l(l({ref:t},s),{},{components:a})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);